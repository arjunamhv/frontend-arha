import { useState } from "react";

function Pentest() {
  const [domain, setDomain] = useState("");
  const [dnsResult, setDnsResult] = useState(null);
  const [subdomainResult, setSubDomainResult] = useState(null);
  const [nmapResult, setNmapResult] = useState(null);
  const [niktoResult, setNiktoResult] = useState(null);
  const [isMutating, setIsMutating] = useState(false);

  const handleNslookup = async () => {
    setIsMutating(true);
    try {
      const response = await fetch("http://localhost/nslookup", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ domain: domain }),
      });
      const jsonData = await response.json();
      setDnsResult(jsonData);
    } catch (error) {
      console.error("Error fetching DNS lookup:", error);
    }
    setIsMutating(false);
  };
  const handleSubDomain = async () => {
    setIsMutating(true);
    try {
      const response = await fetch("http://localhost/subdomains", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ domain: domain }),
      });
      const jsonData = await response.json();
      setSubDomainResult(jsonData);
    } catch (error) {
      console.error("Error fetching DNS lookup:", error);
    }
    setIsMutating(false);
  };
  const handleNmapScan = async () => {
    setIsMutating(true);
    try {
      const response = await fetch("http://localhost/nmap", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ domain: domain }),
      });
      const jsonData = await response.json();
      setNmapResult(jsonData);
    } catch (error) {
      console.error("Error fetching Nmap scan:", error);
    }
    setIsMutating(false);
  };

  const handleNiktoScan = async () => {
    setIsMutating(true);
    try {
      const response = await fetch("http://localhost/nikto", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ domain: domain }),
      });
      const jsonData = await response.json();
      setNiktoResult(jsonData);
    } catch (error) {
      console.error("Error fetching Nikto scan:", error);
    }
    setIsMutating(false);
  };

  return (
    <div>
      <h1>Domain Scanner</h1>
      <div id="nslookup">
        <div className="mb-3">
          <label htmlFor="domain" className="form-label">
            Domain:
          </label>
          <input
            type="text"
            id="domain"
            className="form-control"
            value={domain}
            onChange={(e) => setDomain(e.target.value)}
          />
        </div>
        <div className="d-flex flex-wrap gap-2 mb-3">
          {!isMutating ? (
            <button className="btn btn-danger" onClick={handleNslookup}>
              DNS Lookup
            </button>
          ) : (
            <button disabled className="btn btn-danger placeholder-wave">
              <div class="d-flex align-items-center gap-2">
                <div
                  class="spinner-border spinner-border-sm ms-auto"
                  aria-hidden="true"
                ></div>
                <strong role="status">Loading...</strong>
              </div>
            </button>
          )}
          {!isMutating ? (
            <button className="btn btn-danger" onClick={handleSubDomain}>
              Subdomain lookup
            </button>
          ) : (
            <button disabled className="btn btn-danger placeholder-wave">
              <div class="d-flex align-items-center gap-2">
                <div
                  class="spinner-border spinner-border-sm ms-auto"
                  aria-hidden="true"
                ></div>
                <strong role="status">Loading...</strong>
              </div>
            </button>
          )}
          {!isMutating ? (
            <button className="btn btn-danger" onClick={handleNmapScan}>
              Nmap Scan
            </button>
          ) : (
            <button disabled className="btn btn-danger placeholder-wave">
              <div className="d-flex align-items-center gap-2">
                <div
                  className="spinner-border spinner-border-sm ms-auto"
                  aria-hidden="true"
                ></div>
                <strong role="status">Loading...</strong>
              </div>
            </button>
          )}
          {!isMutating ? (
            <button className="btn btn-danger" onClick={handleNiktoScan}>
              Nikto Scan
            </button>
          ) : (
            <button disabled className="btn btn-danger placeholder-wave">
              <div className="d-flex align-items-center gap-2">
                <div
                  className="spinner-border spinner-border-sm ms-auto"
                  aria-hidden="true"
                ></div>
                <strong role="status">Loading...</strong>
              </div>
            </button>
          )}
        </div>
        {dnsResult && (
          <div>
            <h2>DNS Lookup Result:</h2>
            {dnsResult.error ? (
              <p>{dnsResult.error}</p>
            ) : (
              <pre>Result: {dnsResult.result}</pre>
            )}
          </div>
        )}
        {subdomainResult && (
          <div>
            <h2>Subdomain Lookup Result:</h2>
            {subdomainResult.error ? (
              <p>{subdomainResult.error}</p>
            ) : (
              <div>
                <p>Subdomains found:</p>
                <div className="d-flex flex-wrap">
                  {subdomainResult.subdomains.map((subdomain, index) => (
                    <li className="p-2" key={index}>{subdomain}</li>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {nmapResult && (
          <div>
            <h2>Nmap Scan Result:</h2>
            {nmapResult.error ? (
              <p>{nmapResult.error}</p>
            ) : (
              <table className="table table-striped table-hover table-dark">
                <thead>
                  <tr>
                    <th scope="col">Port</th>
                    <th scope="col">State</th>
                    <th scope="col">Service</th>
                  </tr>
                </thead>
                <tbody className="table-group-divider">
                  {nmapResult.result.map((item, index) => (
                    <tr key={index}>
                      <td>{item.port}</td>
                      <td>{item.state}</td>
                      <td>{item.service}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        )}
        {niktoResult && (
          <div>
            <h2>Nikto Scan Result:</h2>
            {niktoResult.error ? (
              <p>{niktoResult.error}</p>
            ) : (
              <pre>{niktoResult.nikto_result}</pre>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default Pentest;
